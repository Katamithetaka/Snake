name: CMake

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

env:
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  BUILD_TYPE: Release

jobs:

  create_release:
    name: Create release
    runs-on: ubuntu-latest
    # Note this. We are going to use that in further jobs.
    outputs:
      upload_url: ${{ steps.create_release.outputs.upload_url }}
    steps:
      - name: Create release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          release_name: "Release Snake Game #${{ github.run_id }}"
          tag_name: SnakeAlpha${{github.run_number}} 
          draft: false
          prerelease: false

  build-and-release:
    # The CMake configure and build commands are platform agnostic and should work equally
    # well on Windows or Mac.  You can convert this to a matrix build if you need
    # cross-platform coverage.
    # See: https://docs.github.com/en/free-pro-team@latest/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix
    runs-on: ${{matrix.config.os}}
    needs: create_release 
    strategy:
      matrix:
        config:
          - os: windows-latest
          - os: macos-latest
          - os: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v2
      with:
        submodules: recursive
    - if: matrix.config.os == 'macos-latest'
      uses: maxim-lobanov/setup-xcode@v1
      with:
        xcode-version: latest-stable

    - name: Setup cmake
      uses: jwlawson/actions-setup-cmake@v1.9
      with:
        cmake-version: '3.20.x'
        
    - name: Use cmake
      run: cmake --version
        
    - if: matrix.config.os == 'ubuntu-latest'
      name: Download GLFW dependencies
      run: sudo apt-get install xorg-dev

    - name: Configure CMake
      # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
      # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
      run: cmake -B ${{github.workspace}}/build -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}}

    - name: Build
      # Build your program with the given configuration
      run: cmake --build ${{github.workspace}}/build --config ${{env.BUILD_TYPE}}

    - name: zip
      uses: papeloto/action-zip@v1
      with:
          files: bin/Release
          dest: Snake.zip


    - name: Upload Asset
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ needs.create_release.outputs.upload_url }}
        # This is how it will be named on the release page. Put hatever name
        # you like, remember that they need to be different for each platform.
        # You can choose any build matrix parameters. For Rust I use the
        # target triple.
        asset_name: Snake-${{ matrix.config.os }}.zip
        # The path to the file you want to upload.
        asset_path: ${{github.workspace}}/Snake.zip
        # probably you will need to change it, but most likely you are
        # uploading a binary file
        asset_content_type: application/x-7z-compressed

    
      